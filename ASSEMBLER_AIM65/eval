.PAGE 'EVAL'

; TEST A CHAR TO SEE IF ALPHABETIC
; CARRY SET IF ALPHABETIC, CARRY CLEAR IF NOT ALPHABETIC
; REG X CONTAINS INDEX INTO ICRD

NALPH	LDA ICRD,X      ;CHAR TO TEST
	CMP #'A'
	BCC LD766       ;LESS THAN ALPHABET
	CMP #$5B        ;'Z' + 1
	BCC LD749       ;IN ALPHABET RANGE
LD766	CLC
LD767	RTS

; TESTS A CHAR TO SEE IF NUMERIC
; CARRY SET IF NUMERIC, CARRY CLEAR IF NOT NUMERIC
; REG X CONTAINS INDEX INTO ICRD

NUMRC	LDA ICRD,X      ;CHAR TO TEST
	CMP #'0'
	BCC LD766       ;LESS THAN NUMBERS
	CMP #':'        ;'9' + 1
	BCC LD749
	CLC
	RTS

; *********************************
; * CONSTRUCTS A SYMBOL
; * NON-ALPHABETIC CAUSES CARRY CLR
; * OTHERWISE CARRY SET .X IS INDEX
; *********************************

LD774	LDA #$03
LD776	STA KLEN
CONSYM	LDY #$00
LD77A	CPY #6          ;MAXIMUM SYMBOL LENGTH
	BCS LD749       ;SUCESSFUL CONSTRUCT (CARRY IS SET)
C12	LDA #$20
	CPY KLEN        ;ALL CHARS TO SYM?
	BCS LD791       ;YES...FILL IN BLANKS

C14	JSR NALPH       ;CHAR ALPHABETIC
	BCS C20         ;YES...
	JSR NUMRC       ;IS IT A NUMBER
	BCC LD766

C20	LDA ICRD,X      ;NEXT CHAR OF SYM
	INX             ;NEXT COLUMN OF SOURCE
LD791	STA ISYM,Y
	INY
	BNE LD77A       ;ALWAYS

.PAGE
; **********************************************************************
;
;    EVALUATES AN EXPRESSION
;
; REG X CONTAINS INDEX TO START OF EXPRESSION TO BE EVALUATED.
; UPON RTN FROM ROUTINE X CONTAINS POINTER TO FIRST CHARACTER
; BEYOND END, OR ON ERROR RETURN, CONTAINS POINTER TO BAD PORTION.
;
; RETURN SET AS FOLLOWS:
;
;   0  --  STRING COULD BE EVALUATED (IEXP = VALUE OF THE STRING)
;   1  --  UNDEFINED SYMBOL
;   2  --  EXPRESSION IS BAD
;
; **********************************************************************

EVAL	LDA #0          ;INIT EXPRESSION
	STA IEXP
	STA IEXP+1
	ROR IFLAGS+1
	ASL IFLAGS+1
D10	JSR ENDTST      ;END OF EXPR?
	BCS JD300       ;YES-NULL STRING

;
; GET INITIAL OPERATION
;

D11	LDY #'+'
	CMP #'-'        ;UNARY MINUS?
	BNE D15         ;NO
LD7AC	TAY
	INX
D15	STY KOP         ;SAVE OPER

;
; SEARCH FOR '<' & '>' FLAG
;

D20	LDA #0          ;INITIALIZE
	STA K           ;<> FLAGS
	JSR ENDTST      ;END OF EXPRESSION?
	BCS JD300       ;UNINTERPRETABLE

D21	CMP #'<'        ;LOWER BYTE
	BNE D150
	DEC K
	BMI D151
D150	CMP #'>'        ;HIGHER BYTE
	BNE D158
	INC K
D151	INX
	CPX IMAXCL
	BCC D158
JD300	JMP LD832

;
; CONSTANT NUMBER ?
;

D158	JSR NUMRC       ;CHAR NUMERIC
	LDY #$4
	BCS LD835
	LDY #$6

D25	CMP #'$'        ;HEX?
	BEQ D50
	LDY #2

D30	CMP #'@'        ;OCTAL?
	BEQ D50
	LDY #0

D35	CMP #'%'        ;BINARY?
	BEQ D50

;
; SYMBOLS ?
;

D40	JSR NALPH       ;ALPHABETIC?
	BCC D46         ;NO...MAYBE ASSEM CNTER

; PROCESS A SYMBOL

	TXA             ;LOOKS LIKE A SYMBOL
	TAY

D41	INX             ;FIND LENGTH OF SYMBOL
	CPX IMAXCL      ;OFF END OF CARD
	BCS D42         ;YES-COMPUTE LENGTH
D415	JSR NUMRC       ;CHAR NUMERIC?
	BCS D41         ;YES...CONTINUE
	JSR NALPH       ;CHARACTER ALPHA?
	BCS D41         ;YES...CONTINUE
D42	STY TEMP        ;END..COMPUTE LENGTH
	TXA             ;GET ENDING COLUMN
	SEC
	SBC TEMP        ;STARTING COLUMN
	CMP #7          ;LENGTH OVER 6 CHARS?
	BCS JD300
	LDX TEMP
	JSR LD776       ;CONSTRUCT SYMBOL
	BCC JD300       ;BAD SYMBOL

D44	STX TEMP+1
	JSR NFIND
	LDX TEMP+1
	BCS LD844
	LDX TEMP
	LDY #1
	RTS

; EVALUATE '*' ASSEMBLY COUNTER

D46	CMP #'*'
	BNE JD300       ;NO-BAD EXPRESSION
D47	LDA IPC
	STA KNVAL+1
	LDA IPC+1
	STA KNVAL
	INX
	JMP LD844

;
; EVALUATE NUMERIC FIELD
;

D50	INX
	CPX IMAXCL      ;END OF CARD?
	BCC LD835
LD832	LDY #2
	RTS

LD835	LDA LD956,Y
	STA KBASE
	LDA LD956+1,Y
	STA KBASE+1
	JSR NUMBER
	BCC LD832
LD844	LDA K
	BEQ XXXU
	BMI LD84E

	LDA KNVAL
	STA KNVAL+1
LD84E	LDA #0
	STA KNVAL
XXXU	LDA KOP         ;GET THE OPERATION
	CMP #'+'        ;AN ADD?
	BNE D65         ;NO...

;
; '+' = ADDITION
;

	LDA IEXP+1      ;LOW BYTE OF EXPR
	CLC
	ADC KNVAL+1     ;LOW BYTE OF NUMBER
	STA IEXP+1
	LDA IEXP
	ADC KNVAL       ;HI BYTE OF NUMBER

	JSR LD8AF

	BNE LD86F
	TYA
	BEQ LD87F
LD86B	LDA #8
	BNE LD87B
LD86F	TYA
	BEQ XXXW2
LD872	LDA #$FE
	AND IFLAGS+1
XXXW	JMP LD87D
XXXW2	LDA #1
LD87B	ORA IFLAGS+1
LD87D	STA IFLAGS+1
LD87F	JMP LD8A5       ;CONTINUE

D65	CMP #'-'        ;A SUBTRACT
	BNE LD832

;
; '-' = SUBTRACTION
;

	LDA IEXP+1      ;GET LOW BYTE
	SEC
	SBC KNVAL+1     ;LOW BYTE
	STA IEXP+1
	LDA IEXP        ;HIGH BYTE
	SBC KNVAL       ;HIGH BYTE

	JSR LD8AF
	BNE LD89B
	TYA
	BNE LD872
	BEQ XXXW2
LD89B	STY     TEMP
	LDA #1
	AND IFLAGS+1
	EOR TEMP
	BNE LD86B
LD8A5	JSR ENDTST
	LDY #0
	BCS LD8C2
	JMP LD7AC

LD8AF	STA IEXP
	LDA #0
	ROL A
	TAY
	LDA #1
	AND IFLAGS+1
	ASL A
	STA TEMP
	LDA #2
	AND IFLAGS+1
	EOR TEMP
LD8C2	RTS

; TEST FOR THE END OF A STRING (FINDS BLANK, COMMA, RIGHT PAREN)
; CARRY SET IF FOUND, CARRY CLEAR IF NONE FOUND
; X POINTS TO CHAR IN ICRD

ENDTST	CPX IMAXCL
	BCS DD10
	LDA ICRD,X
	CMP #$20
	BEQ DD10
	CMP #','
	BEQ DD10
	CMP #')'
	BEQ DD10
	CMP #';'
	BEQ DD10
	CLC             ;CHARACTERS NOT FOUND
DD10	RTS

LD8DB	LSR A
	TAY
	LDA KLTBL,Y
	BCS LD8E6
	LSR A
	LSR A
	LSR A
	LSR A
LD8E6	AND #$0F
	TAY
	LDA LDE5C,Y
	RTS

.END
