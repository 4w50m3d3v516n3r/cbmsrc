.PAG 'DOS SYNTAX & WRITE'
;********************************
;*
;*  PET2001 DISK ROUTINES
;*  --RSR--7/24/79--
;*
;********************************
;
; TABLD SYMBOLS
XFN1	=$F1            ;SENDS FILENAME1
XFN2	=$F2            ;SENDS FILENAME2
XID	=$D0            ;SENDS DISK ID
XREC	=$E0            ;SENDS S FOR SEG OR LRECL
XWRT	=$E1            ;SENDS W OR L
XD1	=$D1            ;SENDS DRIVE1
XD2	=$D2            ;SENDS DRIVE2
;
; TABLD
;
TABLD	; USED TO BUILD DISK STRINGS
; CATALOG
	.BYT $FF,'$',XD1
; DOPEN  DSAVE DLOAD
	.BYT XD1,':',XFN1,',',XWRT,',',XREC
; APPEND
	.BYT XD1,':',XFN1,',','A'
; HEADER
	.BYT 'N',XD1,':',XFN1,',',XID
; COLLECT
	.BYT 'V',XD1
; BACKUP
	.BYT 'D',XD2,'=',XD1
; COPY
	.BYT 'C',XD2,':',XFN2,'=',XD1,':',XFN1
; CONCAT
	.BYT 'C',XD2,':',XFN2,'=',XD2,':',XFN2
	.BYT ',',XD1,':',XFN1
; RENAME
	.BYT 'R',XD1,':',XFN2,'=',XD1,':',XFN1
; SCRATCH
	.BYT 'S',XD1,':',XFN1
;
.PAG 'DOS SYNTAX & WRITE'
;
; CATALOG  (BOB F'S)
;
CATLOG	LDA LA          ;SAVE LA
	STA WSW
	JSR DOSPAR      ;PARSE THE LINE
	JSR CHK3        ;CHK OPT PARMS
CATALG	LDY #0          ;TABLD OFFSET
	LDX #1          ;JUST $
	LDA PARCHK      ;CHK FOR DEFAULT
	AND #$10        ;NO DRIVE?
	BEQ CATBLD
	INX
CATBLD	TXA             ;A NOW HAS LENGTH
	JSR SENDP       ;BUILD
	LDA DFLTO       ;SAVE DFLTO
	STA CNTDN
	LDA #$60        ;SECONDARY ADDR
	STA SA
	LDA #14         ;OPEN THE FILE
	STA LA
	JSR UNLSN       ;DON'T LISTEN TO FLOPPY
	JSR FOPEN
	LDA #0
	STA SATUS       ;SET STATUS TO 0
	LDY #$03        ;LOOP THREE TIMES
;
WG220	STY FNLEN       ;SAVE NEW COUNT
	LDX #14         ;DISK CHANNEL
	JSR CHKIN
	JSR BASIN
	STA TMP2
	LDY SATUS       ;CHECK STATUS
	BNE WG230       ;BAD STATUS
	JSR BASIN
	STA TMP2+1
	LDY SATUS       ;CHECK STATUS
	BNE WG230
	LDY FNLEN       ;MORE TO DO?
	DEY
	BNE WG220       ;NOT DONE YET
	JSR CLRCHN      ;CLEAR CHANNEL
	JSR SUBB
	LDX TMP2
	LDA TMP2+1
	JSR LINPRT      ;PRINT LINE NUMBER
	LDA #$20        ;PRINT A SPACE
SKIPB	JSR BSOUT
	JSR CLRCHN
WG250	LDX #14         ;DISK CHANNEL
	JSR CHKIN
	JSR BASIN
	PHA
	JSR CLRCHN
	PLA
	LDX SATUS
	BNE WG230       ;BAD
	CMP #0          ;EOL
	BEQ WG240
	JSR SUBA
	JSR STOP1       ;STOP KEY
	BEQ WG230       ;YES...
	JSR GETIN       ;GET CHAR FROM KBYD
	BEQ WG250       ; NOTHING...
	CMP #$20        ;SPACE BAR?
	BNE WG250       ;NO...
WG255	JSR GETIN       ;ANY KEY STARTS
	BEQ WG255
	BNE WG250       ;(JMP)
WG240	LDA #CR
	JSR SUBA
	JSR UNLSN
	LDY #02         ; DO TWICE
	BNE WG220
WG235	PLA             ;CLEAN UP
WG230	JSR CLRCHN
	LDA #14         ;CLOSE FLOPPY
	JMP FCLOSE
;
SUBA	JSR SUBB
	JSR BSOUT
	JMP CLRCHN
;
SUBB	LDX CNTDN
	CPX #3
	BEQ SUBBR
	LDX WSW
	JSR CHKOUT
SUBBR	RTS
;
.PAG 'DOS - DOPEN,APPEND'
;
;ENTRY LOOK UP SUBROUTINE
;
ENTRY0	LDY #$61        ;CALC SA >APPEND ENTRY
ENTRY1	INY
	TYA
	LDX LDTND
ENTRY2	DEX
	BMI RFOUND      ;ALL THRU STK?
	CMP SAT,X
	BEQ ENTRY1      ;THIS SA USED
	BNE ENTRY2      ;CONT DOWN
RFOUND	STY SA           ;.Y=SA
	RTS
;
; DOPEN CODE D:FN[,T[,R]]
;
DOPEN	JSR DOSPAR      ;CALL PARSER SUB
	JSR CHK6
	AND #$22
	BEQ DOPEN2
	JMP SNERR
DOPEN2	JSR ENTRY0      ;GET SA
	LDY #2          ;INFO OFFSET
	LDX #3          ;BASIC LENGTH
	BIT PARCHK      ;REL RECORD?
	BVC LEAV        ;Z=NO
RECLCK	LDX #7          ;LENGTH NOW 7
LEAV	BIT PARCHK      ;CHK FOR @
	BPL LEAV1       ;NO @
	LDA #'@
	STA TBUFF
	TXA
	LDX #1
	JSR SENDP1
	JMP OP94
LEAV1	TXA
	JSR SENDP
	JMP OP94
;
.SKI
; APPEND CODE
;
APPEND	JSR DOSPAR      ;PARSE IT
	JSR CHK6        ;CHK REQ'D PARMS
	AND #$E2        ;CHK OPT PARMS
	BEQ DAPPEN
	JMP SNERR
DAPPEN	JSR ENTRY0      ;GET A SA
	LDY #9          ;TABLD INDEX
	LDA #5          ;LENGTH
	JSR SENDP       ;BUILD
	JMP OP94        ;GO OPEN
;
.PAG 'DOS - ERROR CHANNEL'
;
;ERROR CHANNEL READ
;
ERRCHL	LDA DSDESC      ;ENTRY FOR USER
	BNE ECHKS       ;CHK OLD STATUS
GETDS	LDA #40         ;GET 40 CHAR STR
	STA DSDESC      ;WE HAVE 40 CHRS
	JSR GETSPA
	STX DSDESC+1    ;RETURN LOW
	STY DSDESC+2    ;RETURN HIGH
	LDA #00         ;BACKLINK STRING
	LDY #41
;       STA (DSDESC+1)Y ;UPPER
;       DEY
	JSR PATCH5
	LDA #$0D        ;ADDRESS $000D
	STA (DSDESC+1)Y ;LOWER
ECHKS	LDA FA          ;CHK BUS <=DS READ
	BNE EREAD       ;1F =0 DEFAULT
	LDA #8
	STA FA
EREAD	JSR TALK
	LDA #$6F
	STA SA
	JSR TKSA
	LDY #$FF;FOR OFFSET
LOOP1	INY
	JSR ACPTR
	CMP #CR         ;CHECK FOR END
	BEQ ERREND
	STA (DSDESC+1)Y
	BNE LOOP1       ;BR ALWAYS
ERREND	LDA #00
	STA (DSDESC+1)Y
	JMP UNTLK       ;GOT ALL
;
.PAG 'DOS - FORMAT'
;FORMAT ND:DN[,ID]
;
FORMAT	JSR DOSPAR
	JSR CHK1        ;CHK OPT PARMS
	AND #$11        ;CHK REQ'D PARMS
	CMP #$11
	BEQ DFORMA
FERRO	JMP SNERR
DFORMA	JSR DCLALL      ;CLOSE ALL FILES
	JSR RUSURE      ;R-U-SURE PRPT
	BCC FBUILD      ;C-NO & DIRECT
	RTS             ;Z SET IF FOUND ELSE NO
;
FBUILD	LDY #14         ;TABLD INDEX
	LDA #4          ;LENGTH
	LDX DISKID      ;CHECK FOR DISKID
	BEQ FCONT
	LDA #6          ;LENGTH WITH ID
FCONT	JSR TRANS       ;BUILD AND SEND
;
FERRS	JSR ERRCHL      ;ERRS?
	LDY #0
	LDA (DSDESC+1)Y
	CMP #'2
	BCS FERRP       ;>=2 IS ERROR
	RTS             ;ELSE BYE
;
FERRP	JMP BADDIS      ;PRINT ?BAD DISK
;
.PAG 'DOS - DCLOSE,RECORD'
; DCLOSE
;
DCLOSE	JSR DOSPAR
	AND #$F3        ;CHECK OPT PARMS
	BEQ DCLSE       ;EXTRA STUFF ERR?
	JMP SNERR
DCLSE	JSR OLDCLR
	LDA LA          ;CHK FOR ALL DEFALT
	BEQ DCLALL
	JMP CLOS5       ;GO REMOVE
;
DCLALL	LDA FA          ;GET DISK #
	LDX LDTND       ;SRCH FOR DISK REFS
DCLLP	DEX
	BMI DCLBYE      ;DONE?
	CMP FAT,X
	BNE DCLLP
	LDA LAT,X       ;GET LA & REMOVE
	JSR CLOS10      ;.X=POS .A=LA
	CLV
	BVC DCLALL      ;BRA
DCLBYE	RTS             ;BYE
;
.SKI
; DRECORD
; --P<CHL><RECNUML><RECNUMH><POS>
;
BOBREC	LDA LA          ;CHK TABLES
	JSR JLTLK
	BEQ DRECG
	LDY #MS3-MS1    ;FILE NOT FOUND ERR
	JMP ERMSG
DRECG	JSR JZ100       ;GET RECORD
	JSR OLDCLR
DREBLD	LDA #'P         ;BUILD
	STA TBUFF
	LDA SA          ;GET CHL
	STA TBUFF+1
	LDA POKER       ;GET RECNUML
	STA TBUFF+2
	LDA POKER+1     ;GET RECNUMH
	STA TBUFF+3
	LDA FNLEN2      ;GET POS
	STA TBUFF+4
	LDX #05         ;FNLEN
	JSR TRANR       ;SET POINTERS
	JMP TRANS1      ;CHNL 15
;
.PAG 'DOS - COLLECT'
;COLLECT V<DRIVE#>
;
COLECT	JSR DOSPAR
	JSR CHK3        ;CHK OPT PARMS
DCOLLE	JSR DCLALL      ;CLOSE ALL FILES
	LDY #20         ;TABLD OFFSET
	LDX #1          ;LENGTH
	LDA PARCHK
	AND #$10
	BEQ DCOLL0
	INX             ;INCLUDE DRIVE
DCOLL0	TXA             ;PLACE IN A
	JMP TRANS
;
.PAG 'DOS - BACKUP,COPY,CONCAT'
; BACKUP D<DD>=<SD>
;
BACKUP	JSR DOSPAR
	AND #$30        ;REG'D PARMS
	CMP #$30
	BEQ BBACK
BERRO	JMP SNERR
BBACK	LDA PARCHK      ;MISSING PARMS ERR?
	AND #$C7        ;OPT PARMS
	BNE BERRO
DBACKU	JSR DCLALL      ;CLOSE DISK
	LDY #22
	LDA #4          ;LENGTH
;
; TRANS SUBROUTINE
;
TRANS	JSR SENDP       ;BUILD
TRANS1	LDA #$6F        ;OPEN CHL 15
	STA SA
	JSR LISTN       ;DON'T OPEN15
	LDA SA
	JMP OPENIB      ;SEND MESSAGE
;
.SKI
; COPY ROUTINES CDD:DFN=SD:SFN
;
COPY	JSR DOSPAR      ;PARSE IT
	AND #$30
	CMP #$30        ;CHK REQ'D PARMS
	BNE COPY2
	LDA PARCHK
	AND #$C7
	BEQ COPY3
COPY2	LDA PARCHK
	JSR CHK4
COPCON	LDA PARCHK
COPY3	LDY #26         ;TABLD OFFSET
	LDA #8          ;LENGTH
	JMP TRANS       ;GO DO IT
;
; CONCAT ROUTINES
; --CDD:DFN=DD:DFN,SD:SFN
;
CONCAT	JSR DOSPAR      ;PARSE IT
	JSR CHK4
	LDY #34         ;OFFSET
	LDA #12         ;LENGTH
	JMP TRANS       ;GO DO IT
;
.PAG 'DOS - COPY ROUTINES'
; COPY ROUTINES
;
RSFN	LDA FNLEN
	STA FNLEN2
	LDA FNADR
	STA FNADR2
	LDA FNADR+1
	STA FNADR2+1
;
; MOVE INFO INTO TBUFF
;
RDFN	TYA             ;SAVE Y
	PHA
	LDY FNLEN2      ;CHK FOR NO FILENAME
	BEQ RDRT0
	LDY #0          ;MOVE NAME TO TBUFF
RDMOV	LDA (FNADR2)Y
	STA TBUFF,X
	INX
	INY
	CPY FNLEN2      ;ALL DONE?
	BNE RDMOV
	BEQ RDRT1       ;BRA AROUND
RDRT0	DEX             ;CASE CDD=SD
RDRT1	PLA             ;RESTORE Y
	TAY
	SEC             ;RETURN FLAG
	RTS
;
; ID SUBROUTINE
;
RID	LDA DISKID      ;INCLUDE ID
	STA TBUFF,X
	INX
	LDA DISKID+1
	STA TBUFF,X
	INX
	TXA             ;KILL WEIRD .A JUST IN CASE
	RTS
;
.PAG 'DOS - DSAVE,DLOAD,RENAME'
;DSAVE D:FN
;
DSAVE	JSR DOSPAR
	JSR CHK2
	AND #$66
	BEQ DSAVE2
	JMP SNERR
DSAVE2	LDY #2          ;TABLE OFFSET
	LDA PARCHK      ;CHK FOR @
	AND #$80        ;
	BEQ SAVLD1
SAVLD0	LDA #'@         ;@SYMBOL
	STA TBUFF
	LDX #1          ;ONE CHAR IN
	LDA #3
	JSR SENDP1
	JMP SV3
SAVLD1	LDA #3          ;LENGTH
	JSR SENDP
	JMP SV3
;
; DLOAD D:FN
;
DLOAD	JSR DOSPAR
	JSR CHK2
	AND #$E6
	BEQ DLOAD2
DLOERR	JMP SNERR
DLOAD2	LDY #2
	LDA #3          ;LENGTH
	JSR SENDP       ;BUILD
	LDA #0          ;CLR VERIFY FLAG
	STA VERCK
	JMP LOADNP
.SKI
;RENAME RDD: DFN=SD: SFN
;
RENAME	JSR DOSPAR
	JSR CHK5
	AND #$E4
	BNE DLOERR
DREN	LDY #46         ;OFFSET
	LDA #8          ;LENGTH
	JMP TRANS       ;GO DO IT
.PAG 'DOS - SCRTCH'
;SCRATCH SD: FN
;
SCRTCH	JSR DOSPAR
	JSR CHK1
DSCRAT	JSR RUSURE      ;DIRECT=>R-U-SURE
	BCS NUMBYE      ;C-NO&DIRECT
	LDY #54         ;OFFSET
	LDA #4          ;LENGTH
	JSR TRANS
;
NUMSCR	JSR DDIREC      ;DIRECT?
	BNE NUMBYE      ;Z CLR-NOT DIRECT
	JSR ERRCHL      ;READ ERRS
	LDA #$D         ;PRINT C/R
	JSR PRT
	LDY #0          ;CLR TO READ ERRCHL
NUMLP	LDA (DSDESC+1)Y ;GET MESG
	CMP #00
	BEQ NUMPRT
	JSR PRT         ;TO SCRN
	INY
	BNE NUMLP
NUMPRT	LDA #$D
	JSR PRT
NUMBYE	RTS
.SKI
;DIRECT CHECK SUBROUTINE
DDIREC	LDA TXTPTR+1
	CMP #2
DXCR0	RTS
;
;R-U-SURE SUBROUTINE
RUSURE	JSR DDIREC      ;CHK FOR DIRECT
	BNE ANSYES      ;Z CLR=NOT DIRECT
RUSUR1	LDY #MSG30-MSG1 ;ARE YOU SURE ?
	JSR MSG
	JSR CLRCH       ;CLR CHL FOR BASIN
RUSUR2	JSR BASIN       ;GET BASIC INPUT
	CMP #'Y         ;MUST START WITH Y
	BNE ANSNO
	JSR BASIN       ;NEXT CHR
	CMP #$D         ;CR?
	BEQ ANSYES      ;Y CR
	CMP #'E         ;THEN E
	BNE ANSNO
	JSR BASIN       ;NEXT CHR
	CMP #'S         ;THEN S
	BNE ANSNO
	JSR BASIN       ;NEXT CHR
	CMP #$D         ;CR?
	BEQ ANSYES
ANSNO	CMP #CR         ;LOOK FOR END
	SEC             ;CARRY SET =NO&DIRECT
	BEQ ANSBYE
	JSR BASIN       ;GET NEXT CHR
	BNE ANSNO       ;BRA TO DUMP INPUT
ANSYES	CLC             ;CARRY CLR =NOT DIRECT
ANSBYE	RTS
;
;BAD DISK SUBROUTINE
BADDIS	JSR DDIREC      ;DIRECT?
	BNE ANSBYE      ;NEED RTN
	LDY #MSG31-MSG1 ;? BAD DISK
	JMP MSG
;
;OLDCLR SUBROUTINE
;CLEARS DISK STATUS & SATUS
;
OLDCLR	TYA             ;SAVE Y
	PHA
	LDA DSDESC      ;CHK FOR ALLOCATION
	BEQ OLDCL1      ;BRA IF NOT
	LDY #40
	TYA
	STA (DSDESC+1)Y ;LENGTH OF GARBAGE
	INY
	LDA #$FF
	STA (DSDESC+1)Y ;GARBAGE FLAGED
OLDCL1	LDA #0
	STA SATUS       ;ZAP STATUS
	STA DSDESC      ;KILL DS$
	PLA             ;RESTORE Y
	TAY
	RTS
;
.PAG 'SENDP ROUTINE'
;
SENDP	LDX #0          ;ZERO OFFSET
SENDP1	STA COUNT       ;NON ZERO ENTRY
	JSR OLDCLR      ;CLR OLD STATUS
SENDP2	DEC COUNT
	BMI TRANR
	INY             ;MOVE DOWN TABLE
	LDA TABLD,Y     ;GET NEXT ENTRY
	BPL RPLCE       ;1F N CLR THEN CHAR
RXFN1	CMP #XFN1       ;FILE NAME 1
	BNE RXFN2
	JSR RSFN
RXFN2	CMP #XFN2
	BNE RXREC
	JSR RDFN
RXREC	CMP #XREC
	BNE RXID
	LDA LRECL       ;GET REC#
	BNE RPLCE       ;BRA
RXID	CMP #XID
	BNE RXWRT
	JSR RID
RXWRT	CMP #XWRT       ;CHK FOR W OR L
	BNE RXD1
	JSR RWRT
	BNE RPLCE       ;BRA
RXD1	CMP #XD1
	BNE RXD2
	LDA DRIVE1
	BPL RXDD        ;BRA
RXD2	CMP #XD2
	BNE SENDP2      ;END OF TABLE BRA
	LDA DRIVE2
RXDD	ORA #48         ;CHANGE TO ASCII
;
RPLCE	STA TBUFF,X     ;ELSE INTO BUFFER
	INX
	BNE SENDP2      ;BRA TO RESTART
;
TRANR	STX FNLEN       ;X IS LENGTH TO SEND
	LDA #<TBUFF     ;MOVE POINTERS
	STA FNADR
	LDA #>TBUFF
	STA FNADR+1
	RTS
;
RWRT	LDA LRECL       ;CHA FOR L OR W
	BEQ RWRT1       ;ZERO THEN WRITE
	LDA #'L
	BNE RWRTS       ;BRA
RWRT1	LDA #'S         ;SEND W,S
	STA LRECL
	LDA #'W
RWRTS	RTS
.FILE DOS.PARSER
