	.page
	.subttl  umacro

; macro definition handling
;
; the stack frame is:  + 0 =  pointer to prior frame
;                      + 2 =  macro table entry ptr
;                      + 4 =  current char pointer
;                      + 4 =  last source (sfile)

pshmac	inc level	;bump the macro level
	lda level
	cmp #9
	bcc 10$		;...level ok
	lda #$28	;...>8: too many levels
	jmp bmm3

10$	lda mcstpt
	sta newmac
	lda mcstpt+1
	sta newmac+1	;save stack pointer
	lda stkfrm
	jsr push
	lda stkfrm+1
	jsr push
	lda macent
	jsr push
	lda macent+1
	jsr push
	lda curpnt
	jsr push
	lda curpnt+1
	jsr push
	lda sfile
	jsr push
	lda newmac	;set the frame pointer
	sta stkfrm
	lda newmac+1
	sta stkfrm+1
	rts

popmac	dec level
	bpl 10$
	lda #$24	;stack underflow
	jmp bmm3

10$	lda stkfrm
	sta t0
	sta mcstpt	;reset the stack pointer
	lda stkfrm+1
	sta t0+1
	sta mcstpt+1
	ldy #0
	lda (t0),y
	sta stkfrm
	iny
	lda (t0),y
	sta stkfrm+1
	iny
	lda (t0),y
	sta macent
	iny
	lda (t0),y
	sta macent+1
	iny
	lda (t0),y
	sta curpnt
	iny
	lda (t0),y
	sta curpnt+1
	iny
	lda (t0),y
	sta sfile
	sec
	lda stkfrm
	sbc #<mactab
	lda stkfrm+1
	sbc #>mactab
	bcs 30$
	lda #$24	;table underflow
20$	jmp bmm3

30$	sec
	lda #<mctbnd
	sbc stkfrm
	lda #>mctbnd
	sbc stkfrm+1
	bcc 40$
	lda #$23	;table overflow
	bne 20$
40$	rts

setmac	lda tmpmac+1	;recover macro table entry
	sta macent+1
	tax
	lda tmpmac
	sta macent
	clc
	adc #26		;offset to text in table
	sta curpnt
	txa
	adc #0		;carry into high byte
	sta curpnt+1
	lda sfile
	ora #frmmac	;mark it from macro
	sta sfile
	rts

	.page
labprc	lda isym+1	;compare user label with reserved symbols
	cmp #space
	bne 10$		;...not reserved if length > 1

	lda isym	;length=1, compare with reserved symbols
	cmp #'A'
	beq 20$		;...is reserved
	cmp #'X'
	beq 20$		;...is reserved
	cmp #'Y'
	beq 20$		;...is reserved
10$	clc
	rts		;...return false (.c=0)

20$	lda #32		;set error codes
	ldy #3
	rts		;...return true (.c=1)

;	.end
