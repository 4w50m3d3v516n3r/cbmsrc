	.page
	.subttl  numsyms

; convert base 8,10,16 to binary
; carry set if successful conversion, carry clear if error.
; x must point to character

number	lda #0
	sta knval	;value of number is 0
	sta knval+1
10$	lda icrd,x	;get character
	jsr numrc	;see if numeric
	bcc 20$		;not numeric
	sbc #'0'	;remove zone
	jmp 30$		;check for valid base
20$	jsr nalph	;char alphabetic
	bcc 40$		;no...means error
	sbc #55		;alpha--remove zone
30$	cmp kbase	;base valid
	bcc 50$		;yes...valid
40$	clc		;invalid base
	rts

50$	sta colcnt
	txa
	pha		;put pointer on stack
	ldy kbase	;base
	cpy #2		;binary?
	bne 60$		;no...
	ldx #1		;binary...1 shift
	bne 90$

60$	cpy #8		;octal
	bne 70$		;no...
	ldx #3		;octal--3 shifts.
	bne 90$

70$	cpy #16		;hex
	bne 80$		;no...
	ldx #4		;hex--4 shifts
	bne 90$

80$	cpy #10		;decimal
	bne 40$		;no... base is invalid
	lda knval
	sta temp
	lda knval+1
	sta temp+1
	ldx #3		;decimal--3 + 1 shifts

90$	asl knval+1	;low order bits
	rol knval	;high order bits
	bcc 100$	;not overflow
	lda overflow	;overflow bit
	ora #8
	sta overflow
100$	dex		;shift counter
	bne 90$		;continue
	cpy #10		;decimal
	bne 120$	;no...
	asl temp+1	;decimal does another
	rol temp
	bcc 115$	;did not overflow
	lda overflow	;set overflow
	ora #8
	sta overflow
115$	lda knval+1	;add to finish
	clc
	adc temp+1
	sta knval+1
	lda knval
	adc temp
	sta knval
	bcc 120$	;overflow?
	lda overflow
	ora #8
	sta overflow
120$	lda colcnt
	clc
	adc knval+1
	sta knval+1
	bcc 130$
	inc knval
	bne 130$	;no overflow
	lda overflow
	ora #8
	sta overflow
130$	pla
	tax
	inx
	dec klen	;length of number
	beq 140$	;done
	jmp 10$
140$	sec		;success
	rts

	.page
; search sym tab for current sym. search is linear.
; carry set if found. carry clear if not found.
; tops points to insert adr for new symbol.

nfind	lda stsave	;copy start sym's adr
	sta bots
	lda stsave+1
	sta bots+1
	lda nosym	;calc top from sym's #
	sta tops+1
	lda nosym+1
	asl a		;times 8
	rol tops+1
	asl a
	rol tops+1
	asl a
	rol tops+1
	clc		;add delta to beginning
	adc bots
	sta tops
	sta itops
	lda tops+1
	adc bots+1
	sta tops+1
	sta itops+1

10$	sec		;calc delta = tops-bots
	lda tops
	sbc bots
	sta dels
	lda tops+1
	sbc bots+1
;	bcs 15$		;always i hope !
;	brk		;<<<<<<<<<< error <<<<<<<<<<

15$	lsr a		;divide by 2
	sta dels+1
	lda dels
	ror a
	and #$f8	;mod 8
	sta dels

	clc		;calc mids=bots+dels/2
	lda bots
	adc dels
	sta mids
	lda bots+1
	adc dels+1
	sta mids+1

	ldy #$ff	;so we start at zero
20$	iny
	cpy #6		;a match on sym
	beq 60$		;yes
	lda (mids),y	;cmp another char
	cmp isym,y
	beq 20$		;equal check next column

	lda dels	;no more in top & bot ?
	ora dels+1
	beq 40$		;yes - no match

	lda mids
	ldy mids+1
	bcc 30$		;sym greater than

	sta tops	;sym less than
	sty tops+1
	bne 10$		;always

30$	sta bots	;sym greater than
	sty bots+1
	bne 10$		;always


40$	bcc 50$		;exit
	lda bots	;lowest label
	ldy bots+1	;move tops to bots
	sta tops
	sty tops+1
	clc
50$	rts



60$	lda (mids),y	;copy value
	sta knval
	iny
	lda (mids),y
	sta knval+1

	lda pass	;on pass two?
	beq 70$		;no
	lda options	;doing a cross ref?
	and #opt_xref
	beq 70$		;no

	sec		;get symbol #
	lda mids	;actual adr
	sbc stsave	;subtract base
	sta dels
	lda mids+1
	sbc stsave+1
	lsr a		;divide by 8
	ror dels
	lsr a
	ror dels
	lsr a
	ror dels
	sta dels+1

	ldx #9		;is our channel open?
	jsr ckout_x
	lda dels	;send label#
	jsr bsout
	lda dels+1
	jsr bsout
	lda icrdno+1	;send line#
	jsr bsout
	lda icrdno
	jsr bsout
70$	sec		;flag a find
	rts

	.page
; **************************************************************
; * enter new symbol into symbol table:
; *	symtbl --> next available location in the symbol table.
; *	.x contains offset for symbol information storage.
; **************************************************************

nsert	txa		;save .x
	pha
	clc		;calc new top from syms
	lda itops	;tops from nfind
	adc #8		;move up by 8
	sta dels
	lda itops+1
	adc #0
	sta dels+1

	ldy #7		;for indirects
	sec
	lda dels	;out of room?
	sbc #<syend
	lda dels+1
	sbc #>syend
	bcs 80$		;...yes, symbol table overflow

	sec		;calc how much to move
	lda dels
	sbc tops
	tax
	lda dels+1
	sbc tops+1
	sta count

10$	txa		;done moving?
	ora count
	beq 40$		;yes

	lda (itops),y	;move a symbol
	sta (dels),y
	tya	 	;adjust pointers
	bne 20$
	dec itops+1
	dec dels+1
20$	dey
	txa	  	;adjust counter
	bne 30$
	dec count
30$	dex
	jmp 10$



40$	clc		;adjust itops to its final value
	tya
	adc itops
	sta itops
	bcc 50$
	inc itops+1
50$	pla		;restore .x
	tax

	ldy #5		;put symbol into table
60$	lda isym,y	;source
	sta (tops),y	;destination
	dey
	bpl 60$		;...loop until done

	ldy #6		;symbol is in table, now define it
	lda knval
	sta (tops),y
	iny
	lda knval+1
	sta (tops),y
	inc nosym+1
	bne 70$
	inc nosym
70$	rts

80$	jsr clear_io	;symbol table overflow error
	jsr primm
	.byte cr,rvs,bell,'SYMBOL TABLE OVERFLOW',cr,0
	jmp done	;...abort assembly

	.page
; search opcode table for given mnemonic, using binary search.
; carry set if opcode found, carry clear if opcode not found.

nopfnd	lda #0		;init table pointers
	sta first
	lda #55		; # of opcodes (0-55)
	sta last

10$	lda last	;test for done (end of table)
	cmp first
	bpl 20$		;...no
	clc
	rts		;...yes, return false

20$	clc
	adc first	;table index = int(first+last)/2
	lsr a		;(0 in bit 7)
	sta btemp
	tax
	asl a		;y=x*3 (0 in carry)
	adc btemp
	tay

	lda isym	;compare each of 3 characters of mnemonic
	cmp oprnds,y
	bne 30$		;...no match
	lda isym+1
	cmp oprnds+1,y
	bne 30$		;...no match
	lda isym+2
	cmp oprnds+2,y
	beq 50$		;...match!

30$	bcc 40$		;no match: split search list
	inx
	stx first	;throw away first part of list
	bcs 10$		;...loop until done
40$	dex
	stx last	;throw away last part of list
	bcc 10$		;...loop until done

50$	lda ktmpl,x	;match found at index=.X
	sta joptem	;...template
	lda kcode,x	;...base opcode
	sta jopbas
	rts		;...found: return true (.c=1)

;	.end
